{
	"info": {
		"_postman_id": "ff12cc58-e45b-4fdb-b005-435f17b9f3bb",
		"name": "Comments EWM",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21420110"
	},
	"item": [
		{
			"name": "comments",
			"item": [
				{
					"name": "add users and event",
					"item": [
						{
							"name": "add event and user",
							"item": [
								{
									"name": "Создание пользователя 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const source = JSON.parse(pm.request.body.raw);\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
													"pm.expect(target).to.have.property('id');\r",
													"pm.expect(target).to.have.property('name');\r",
													"pm.expect(target).to.have.property('email');\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
													"    pm.expect(target.id).to.not.be.null;\r",
													"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
													"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"petrov.i@practicummail.ru\",\r\n  \"name\": \"Петров Иван\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание пользователя 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const source = JSON.parse(pm.request.body.raw);\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
													"pm.expect(target).to.have.property('id');\r",
													"pm.expect(target).to.have.property('name');\r",
													"pm.expect(target).to.have.property('email');\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
													"    pm.expect(target.id).to.not.be.null;\r",
													"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
													"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"ivanov.p@practicummail.ru\",\r\n  \"name\": \"Иванов Петр\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание категории 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const source = JSON.parse(pm.request.body.raw);\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
													"pm.expect(target).to.have.property('id');\r",
													"pm.expect(target).to.have.property('name');\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
													"    pm.expect(target.id).to.not.be.null;\r",
													"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"категория 1\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание категории 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const source = JSON.parse(pm.request.body.raw);\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
													"pm.expect(target).to.have.property('id');\r",
													"pm.expect(target).to.have.property('name');\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
													"    pm.expect(target.id).to.not.be.null;\r",
													"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"категория 2\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/admin/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const source = JSON.parse(pm.request.body.raw);\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
													"pm.expect(target).to.have.property('id');\r",
													"pm.expect(target).to.have.property('title');\r",
													"pm.expect(target).to.have.property('annotation');\r",
													"pm.expect(target).to.have.property('category');\r",
													"pm.expect(target).to.have.property('paid');\r",
													"pm.expect(target).to.have.property('eventDate');\r",
													"pm.expect(target).to.have.property('initiator');\r",
													"pm.expect(target).to.have.property('description');\r",
													"pm.expect(target).to.have.property('participantLimit');\r",
													"pm.expect(target).to.have.property('state');\r",
													"pm.expect(target).to.have.property('createdOn');\r",
													"pm.expect(target).to.have.property('location');\r",
													"pm.expect(target).to.have.property('requestModeration');\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
													"    pm.expect(target.id).to.not.be.null;\r",
													"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
													"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
													"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
													"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
													"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
													"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
													"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
													"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
													"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"\r",
													"var eventDate = moment().add(20, 'HH');\r",
													"pm.globals.set('eventDate', eventDate.format('YYYY-MM-DD HH:mm:ss'));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"annotation\": \"annotation\",\r\n    \"category\": 1,\r\n    \"description\": \"description\",\r\n    \"eventDate\": \"2022-11-10 10:00:00\",\r\n    \"location\": {\r\n        \"lat\": \"100\",\r\n        \"lon\": \"200\"\r\n    },\r\n    \"paid\": true,\r\n    \"participantLimit\": 100,\r\n    \"requestModeration\": false,\r\n    \"title\": \"title\",\r\n    \"state\": \"PUBLISHED\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"variable": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const source = JSON.parse(pm.request.body.raw);\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
													"pm.expect(target).to.have.property('id');\r",
													"pm.expect(target).to.have.property('title');\r",
													"pm.expect(target).to.have.property('annotation');\r",
													"pm.expect(target).to.have.property('category');\r",
													"pm.expect(target).to.have.property('paid');\r",
													"pm.expect(target).to.have.property('eventDate');\r",
													"pm.expect(target).to.have.property('initiator');\r",
													"pm.expect(target).to.have.property('description');\r",
													"pm.expect(target).to.have.property('participantLimit');\r",
													"pm.expect(target).to.have.property('state');\r",
													"pm.expect(target).to.have.property('createdOn');\r",
													"pm.expect(target).to.have.property('location');\r",
													"pm.expect(target).to.have.property('requestModeration');\r",
													"});\r",
													"\r",
													"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
													"    pm.expect(target.id).to.not.be.null;\r",
													"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
													"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
													"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
													"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
													"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
													"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
													"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
													"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
													"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"\r",
													"var eventDate = moment().add(20, 'HH');\r",
													"pm.globals.set('eventDate', eventDate.format('YYYY-MM-DD HH:mm:ss'));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"annotation\": \"annotation 2\",\r\n    \"category\": 2,\r\n    \"description\": \"description 2\",\r\n    \"eventDate\": \"2022-11-20 10:00:00\",\r\n    \"location\": {\r\n        \"lat\": \"300\",\r\n        \"lon\": \"500\"\r\n    },\r\n    \"paid\": true,\r\n    \"participantLimit\": 50,\r\n    \"requestModeration\": false,\r\n    \"title\": \"title 2\",\r\n    \"state\": \"PUBLISHED\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events"
											],
											"variable": [
												{
													"key": "userId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "text not blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "text not null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария user 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var createdOn = moment();\r",
											"pm.environment.set('createdOn', createdOn.format('YYYY-MM-DD HH:mm:ss'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"const userId = pm.request.userId\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.text).equal(source.text, 'Название комментария должно совпадать с отправленным');\r",
											"    pm.expect(target.event.id).equal(1);\r",
											"    pm.expect(target.author.id).equal(1);\r",
											"    pm.expect(target.createdOn).to.eql(pm.environment.get('createdOn')).toString;\r",
											"    pm.expect(target.commentStatus).equal(\"NotEdited\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"comment1 from user 1 to event 1\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).equal(1);\r",
											"    pm.expect(target.event.id).equal(1);\r",
											"    pm.expect(target.author.id).equal(1);\r",
											"    pm.expect(target.commentStatus).equal(\"NotEdited\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение комментария по неверному id комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "commentId",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение комментария по неверному id пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "10"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление второго комментария user1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var createdOn = moment();\r",
											"pm.environment.set('createdOn', createdOn.format('YYYY-MM-DD HH:mm:ss'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"const userId = pm.request.userId\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.text).equal(source.text, 'Название комментария должно совпадать с отправленным');\r",
											"    pm.expect(target.event.id).equal(1);\r",
											"    pm.expect(target.author.id).equal(1);\r",
											"    pm.expect(target.createdOn).to.eql(pm.environment.get('createdOn')).toString;\r",
											"    pm.expect(target.commentStatus).equal(\"NotEdited\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"comment 2 from user 1 to event 1\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение комментариев user in event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json()[0];\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(jsonData.length, 'bookings count in total').to.eql(2);\r",
											"    pm.expect(target.id).equal(1);\r",
											"    pm.expect(target.event.id).equal(1);\r",
											"    pm.expect(target.author.id).equal(1);\r",
											"    pm.expect(target.commentStatus).equal(\"NotEdited\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение комментариев user in event по неверному eventId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "eventId",
											"value": "11"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария userId1  to eventId 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var createdOn = moment();\r",
											"pm.environment.set('createdOn', createdOn.format('YYYY-MM-DD HH:mm:ss'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"const userId = pm.request.userId\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.text).equal(source.text, 'Название комментария должно совпадать с отправленным');\r",
											"    pm.expect(target.event.id).equal(2);\r",
											"    pm.expect(target.author.id).equal(1);\r",
											"    pm.expect(target.createdOn).to.eql(pm.environment.get('createdOn')).toString;\r",
											"    pm.expect(target.commentStatus).equal(\"NotEdited\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"comment 3 from user 1 to event 2\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "eventId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение всех комментариев user 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json()[0];\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(jsonData.length, 'bookings count in total').to.eql(3);\r",
											"    pm.expect(target.id).equal(1);\r",
											"    pm.expect(target.author.id).equal(1);\r",
											"    pm.expect(target.commentStatus).equal(\"NotEdited\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение всех комментариевпо неверному userId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "11"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение комментария с commentId 1 userId 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"update comment1 from user 1 to event 1\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение комментария с commentId 1 userId 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var editedOn = moment();\r",
											"pm.environment.set('editedOn', editedOn.format('YYYY-MM-DD HH:mm:ss'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"const userId = pm.request.userId\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, editedOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('editedOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.text).equal(source.text, 'Название комментария должно совпадать с отправленным');\r",
											"    pm.expect(target.event.id).equal(1);\r",
											"    pm.expect(target.author.id).equal(1);\r",
											"    pm.expect(target.editedOn).to.eql(pm.environment.get('editedOn')).toString;\r",
											"    pm.expect(target.commentStatus).equal(\"EditedByUser\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"update comment1 from user 1 to event 1\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария с commentId 1 userId 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария с commentId 1 userId 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "Изменение комментария администратором с commentId 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var editedOn = moment();\r",
											"pm.environment.set('editedOn', editedOn.format('YYYY-MM-DD HH:mm:ss'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const userId = pm.request.userId\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, editedOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('editedOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.event.id).equal(1);\r",
											"    pm.expect(target.author.id).equal(1);\r",
											"    pm.expect(target.editedOn).to.eql(pm.environment.get('editedOn')).toString;\r",
											"    pm.expect(target.commentStatus).equal(\"EditedByAdmin\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"update comment1 by administrator from user 1 to event 1\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение комментария с commentId 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение комментария администратором по неверному id комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение комментария администратором с commentId 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).equal(2);\r",
											"    pm.expect(target.event.id).equal(1);\r",
											"    pm.expect(target.author.id).equal(1);\r",
											"    pm.expect(target.commentStatus).equal(\"EditedByAdmin\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение комментария с commentId 2 userId 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"update comment1 from user 1 to event 1\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "commentId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария user2  to event 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var createdOn = moment();\r",
											"pm.environment.set('createdOn', createdOn.format('YYYY-MM-DD HH:mm:ss'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"const userId = pm.request.userId\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.text).equal(source.text, 'Название комментария должно совпадать с отправленным');\r",
											"    pm.expect(target.event.id).equal(1);\r",
											"    pm.expect(target.author.id).equal(2);\r",
											"    pm.expect(target.createdOn).to.eql(pm.environment.get('createdOn')).toString;\r",
											"    pm.expect(target.commentStatus).equal(\"NotEdited\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"comment 4 from user 2 to event 1\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "блокировка комментирования администратором userId 10",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/users/:userId/disable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"users",
										":userId",
										"disable"
									],
									"variable": [
										{
											"key": "userId",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "блокировка комментирования администратором userId 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/users/:userId/disable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"users",
										":userId",
										"disable"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение комментария с commentId 4 userId 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"update comment4 from user 2 to event 1\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commentId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "разблокировка комментирования администратором userId 10",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/users/:userId/disable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"users",
										":userId",
										"disable"
									],
									"variable": [
										{
											"key": "userId",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "разблокировка комментирования администратором userId 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/users/:userId/enable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"users",
										":userId",
										"enable"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение комментария с commentId 4 userId 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var editedOn = moment();\r",
											"pm.environment.set('editedOn', editedOn.format('YYYY-MM-DD HH:mm:ss'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"const userId = pm.request.userId\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, editedOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('editedOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.text).equal(source.text, 'Название комментария должно совпадать с отправленным');\r",
											"    pm.expect(target.event.id).equal(1);\r",
											"    pm.expect(target.author.id).equal(2);\r",
											"    pm.expect(target.editedOn).to.eql(pm.environment.get('editedOn')).toString;\r",
											"    pm.expect(target.commentStatus).equal(\"EditedByUser\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"update comment4 from user 2 to event 1\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commentId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "блокировка комментирования администратором userId 2 по времени",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var blockTime = moment().add(1, 's');\r",
											"pm.globals.set('blockTime', blockTime.format('YYYY-MM-DD HH:mm:ss'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/users/:userId/disable?timeBlock={{blockTime}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"users",
										":userId",
										"disable"
									],
									"query": [
										{
											"key": "timeBlock",
											"value": "{{blockTime}}"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение комментария с commentId 4 userId 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"update comment4 from user 2 to event 1\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commentId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "разблокировка комментирования администратором userId 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/users/:userId/enable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"users",
										":userId",
										"enable"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение комментария с commentId 4 userId 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var editedOn = moment();\r",
											"pm.environment.set('editedOn', editedOn.format('YYYY-MM-DD HH:mm:ss'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"const userId = pm.request.userId\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, editedOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('editedOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.text).equal(source.text, 'Название комментария должно совпадать с отправленным');\r",
											"    pm.expect(target.event.id).equal(1);\r",
											"    pm.expect(target.author.id).equal(2);\r",
											"    pm.expect(target.editedOn).to.eql(pm.environment.get('editedOn')).toString;\r",
											"    pm.expect(target.commentStatus).equal(\"EditedByUser\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"second update comment4 from user 2 to event 1\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commentId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "блокировка комментирования администратором userId 2 по времени",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var blockTime = moment().add(2, 's');\r",
											"pm.globals.set('blockTime', blockTime.format('YYYY-MM-DD HH:mm:ss'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/users/:userId/disable?timeBlock={{blockTime}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"users",
										":userId",
										"disable"
									],
									"query": [
										{
											"key": "timeBlock",
											"value": "{{blockTime}}"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение комментария с commentId 4 userId 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"update comment4 from user 2 to event 1\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commentId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение комментария с commentId 4 userId 2 Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);\r",
											"var moment = require('moment');\r",
											"\r",
											"var editedOn = moment().add(2, 's');;\r",
											"pm.environment.set('editedOn', editedOn.format('YYYY-MM-DD HH:mm:ss'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"const userId = pm.request.userId\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, editedOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('editedOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.text).equal(source.text, 'Название комментария должно совпадать с отправленным');\r",
											"    pm.expect(target.event.id).equal(1);\r",
											"    pm.expect(target.author.id).equal(2);\r",
											"    pm.expect(target.editedOn).to.eql(pm.environment.get('editedOn')).toString;\r",
											"    pm.expect(target.commentStatus).equal(\"EditedByUser\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"second update comment4 from user 2 to event 1\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commentId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария с commentId 10",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария с commentId 4",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение администратором всех комментариев user -10",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "-10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение администратором всех комментариев user 10",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение администратором всех комментариев user 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json()[0];\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(jsonData.length, 'bookings count in total').to.eql(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария user2  to event 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var createdOn = moment();\r",
											"pm.environment.set('createdOn', createdOn.format('YYYY-MM-DD HH:mm:ss'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"const userId = pm.request.userId\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.text).equal(source.text, 'Название комментария должно совпадать с отправленным');\r",
											"    pm.expect(target.event.id).equal(1);\r",
											"    pm.expect(target.author.id).equal(2);\r",
											"    pm.expect(target.createdOn).to.eql(pm.environment.get('createdOn')).toString;\r",
											"    pm.expect(target.commentStatus).equal(\"NotEdited\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"comment 5 from user 2 to event 1\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение администратором всех комментариев eventId 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json()[0];\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(jsonData.length, 'bookings count in total').to.eql(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение администратором всех комментариев eventId 1 userId 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json()[0];\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Комментарий должна содержать поля: id, name, event, author, createdOn, commentStatus\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event')\r",
											"pm.expect(target).to.have.property('author')\r",
											"pm.expect(target).to.have.property('createdOn')\r",
											"pm.expect(target).to.have.property('commentStatus')\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(jsonData.length, 'bookings count in total').to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/events/:eventId/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"events",
										":eventId",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "1"
										},
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "получение события с eventId 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"var jsonData = pm.response.json().commentDtoList;\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration, commentDtoList\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('views');\r",
									"pm.expect(target).to.have.property('confirmedRequests');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('publishedOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"pm.expect(target).to.have.property('commentDtoList');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(jsonData.length, 'comments count in total').to.eql(2);\r",
									"    pm.expect(jsonData[0].id, 'result[0]: \"id\" field').equal(2);\r",
									"    pm.expect(jsonData[0].event.id, 'result[0]: \"event.id\" field').equal(1);\r",
									"    pm.expect(jsonData[0].author.id, 'result[0]: \"author.id\" field').equal(1);\r",
									"    pm.expect(jsonData[0].commentStatus, 'result[0]: \"commentStatus\" field').equal(\"EditedByAdmin\");\r",
									"    pm.expect(jsonData[1].id, 'result[0]: \"id\" field').equal(5);\r",
									"    pm.expect(jsonData[1].event.id, 'result[0]: \"event.id\" field').equal(1);\r",
									"    pm.expect(jsonData[1].author.id, 'result[0]: \"author.id\" field').equal(2);\r",
									"    pm.expect(jsonData[1].commentStatus, 'result[0]: \"commentStatus\" field').equal(\"NotEdited\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}